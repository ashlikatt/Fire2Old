// Handles +, -, *, /, and %
trait Add<T, R> {
    fn add(self, other: T): R;
}
trait Subtract<T, R> {
    fn subtract(self, other: T): R;
}
trait Multiply<T, R> {
    fn multiply(self, other: T): R;
}
trait Divide<T, R> {
    fn divide(self, other: T): R;
}
trait Modulo<T, R> {
    fn modulo(self, other: T): R;
}

// Handles &
trait Concatenate<T, R> {
    fn concatenate(self, other: T): R;
}

// Handles == and !=
trait Equality {
    fn isEqual(self, other: Self): Boolean;
}

// Handles >, <, >=, and <=.
trait Comparable<T> {
    fn compare(self, other: T): Num;
}

// Handles ||, &&, and !
trait Or<T, R> {
    fn or(self, other: T): R;
}
trait And<T, R> {
    fn and(self, other: T): R;
}
trait Not<T> {
    fn not(self): T;
}

// Handles things like var[5] and var[2]=1
trait Accessible<T, R> {
    fn getKey(self, key: T): R;
    fn setKey(self, key: T, val: R): Self;
}


